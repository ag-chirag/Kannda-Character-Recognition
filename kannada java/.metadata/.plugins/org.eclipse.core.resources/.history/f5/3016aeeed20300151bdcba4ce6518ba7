package Utils;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class Utils {

	public static int[][] to2DArray(BufferedImage image) {
		int[][] imageData = new int[image.getHeight()][image.getWidth()];
		for (int y = 0; y < imageData.length; y++) {
			for (int x = 0; x < imageData[y].length; x++) {

				if (image.getRGB(x, y) == Color.BLACK.getRGB()) {
					imageData[y][x] = 1;
				} else {
					imageData[y][x] = 0;
				}
			}
		}
		return imageData;
	}

	public static BufferedImage generateImage(int[][] imageData) {

		BufferedImage image = new BufferedImage(imageData[0].length,
				imageData.length, BufferedImage.TYPE_INT_RGB);
		for (int y = 0; y < imageData.length; y++) {

			for (int x = 0; x < imageData[y].length; x++) {

				if (imageData[y][x] == 1) {
					image.setRGB(x, y, Color.BLACK.getRGB());

				} else {
					image.setRGB(x, y, Color.WHITE.getRGB());
				}
			}
		}
		return image;
	}

	public static int getAvgHieght(int[][] imageData) {
		int upperBound = 0, // upperBound has lower value.
		lowerBound = 0;
		// int line_number = 0;
		ArrayList<Integer> height = new ArrayList<Integer>();
		boolean black_found = false;
		for (int y = 0; y < imageData.length; y++) {
			int current_width = imageData[y].length;
			int white_count = 0;
			for (int x = 0; x < current_width; x++) {
				if (imageData[y][x] == 0)
					white_count++;
				else {
					black_found = true;
					break;
				}
			}

			if (white_count == current_width) {
				if (black_found) {
					lowerBound = y;
					height.add(lowerBound - upperBound);
					upperBound = lowerBound;
					black_found = false;
				} else
					upperBound = y;
			}
		}

		int sum = 0;
		for (int x : height) {
			sum += x;
		}
		if (height.size() != 0)
			return sum / height.size();
		else
			return 0;
	}

	public static BufferedImage findAreaOfInterest(BufferedImage character) {
		int width = character.getWidth();
		int height = character.getHeight();
		int startingRow = -1;
		int endingRow = -1;
		int startingCol = -1;
		int endingCol = -1;
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				if (character.getRGB(x, y) == Color.BLACK.getRGB())
					if (startingRow == -1) {
						startingRow = y;
						endingRow = y;
					} else {
						endingRow = y;
						break;
					}

			}
		}
		
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				if (character.getRGB(x, y) == Color.BLACK.getRGB())
					if (startingCol == -1) {
						startingCol = x;
						endingCol = x;
					} else {
						endingCol = x;
						break;
					}
			}
		}
		
		if (startingRow != -1 && endingRow != -1 && width > 0 && height > 0
				&& (endingRow - startingRow + 1) <= height)
			return character.getSubimage(startingCol, startingRow, width, endingRow
					- startingRow + 1);
		return null;
	}

	public static BufferedImage getResizedImage(BufferedImage img,
			int targetWidth, int targetHeight, Object hint,
			boolean higherQuality) {
		int type = (img.getTransparency() == Transparency.OPAQUE) ? BufferedImage.TYPE_INT_RGB
				: BufferedImage.TYPE_INT_ARGB;
		BufferedImage ret = (BufferedImage) img;
		int w, h;
		if (higherQuality) {
			// Use multi-step technique: start with original size, then
			// scale down in multiple passes with drawImage()
			// until the target size is reached
			w = img.getWidth();
			h = img.getHeight();
		} else {
			// Use one-step technique: scale directly from original
			// size to target size with a single drawImage() call
			w = targetWidth;
			h = targetHeight;
		}

		do {
			if (higherQuality && w > targetWidth) {
				w /= 2;
				if (w < targetWidth) {
					w = targetWidth;
				}
			}

			if (higherQuality && h > targetHeight) {
				h /= 2;
				if (h < targetHeight) {
					h = targetHeight;
				}
			}

			BufferedImage tmp = new BufferedImage(w, h, type);
			Graphics2D g2 = tmp.createGraphics();
			g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, hint);
			// g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
			// RenderingHints.VALUE_ANTIALIAS_ON);
			g2.drawImage(ret, 0, 0, w, h, null);
			g2.dispose();

			ret = tmp;
		} while (w != targetWidth || h != targetHeight);

		return ret;
	}

	public static BufferedImage brutBinarize(BufferedImage image) {
		for (int x = 0; x < image.getWidth(); x++) {
			for (int y = 0; y < image.getHeight(); y++) {
				if (image.getRGB(x, y) != Color.WHITE.getRGB())
					image.setRGB(x, y, Color.BLACK.getRGB());
			}
		}

		return image;
	}

	public static int[][] threshHoldBinarize(BufferedImage image) {
		int[][] imageData = new int[image.getHeight()][image.getWidth()];
		int[] pixel;
		for (int y = 0; y < imageData.length; y++) {
			for (int x = 0; x < imageData[y].length; x++) {

				pixel = image.getRaster().getPixel(x, y, new int[3]);
				double temp = 0.2126 * pixel[0] + 0.7152 * pixel[1] + 0.0722
						* pixel[2];
				if (temp < 200) {
					imageData[y][x] = 1;
				} else {
					imageData[y][x] = 0;
				}
			}
		}
		return imageData;
	}

	public static String readFile(String fileName) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(fileName));
		try {
			StringBuilder sb = new StringBuilder();
			String line = br.readLine();

			while (line != null) {
				sb.append(line);
				sb.append("\n");
				line = br.readLine();
			}
			return sb.toString();
		} finally {
			br.close();
		}
	}

	public static void clearFolders() {
		String base = "E:/";
		String[] folders = { "lines", "buffer","temp", "oneCount","letters"};

		for (int i = 0; i < folders.length; i++) {
			File folder = new File(base + folders[i]);

			for (final File fileEntry : folder.listFiles()) {
				try {
					fileEntry.delete();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
//		File result = new File("E:/result.txt");
//		result.delete();
	}
}